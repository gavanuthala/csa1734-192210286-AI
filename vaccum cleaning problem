from collections import deque

# Sample grid representing the room with clean (0) and dirty (1) cells
grid = [
    [0, 1, 0, 0],
    [0, 1, 1, 0],
    [0, 0, 0, 1],
    [0, 1, 0, 0]
]

def vacuum_cleaner_problem(grid):
    rows = len(grid)
    cols = len(grid[0])

    # Directions for moving: up, down, left, right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    # Initialize visited set to keep track of visited cells
    visited = set()

    # Queue for BFS: (current row, current col, steps taken so far, path)
    queue = deque([(0, 0, 0, [])])  # Start from top-left corner

    # Perform BFS
    while queue:
        r, c, steps, path = queue.popleft()

        # Mark the current cell as visited
        visited.add((r, c))

        # Clean the current cell if it's dirty
        if grid[r][c] == 1:
            grid[r][c] = 0

        # Print the current grid state with an explanation
        print(f"Step {steps}: Current Grid State after cleaning cell ({r}, {c}):")
        for row in grid:
            print(row)
        print()

        # Check if all cells are clean
        if all(all(cell == 0 for cell in row) for row in grid):
            print(f"All cells cleaned in {steps} steps")
            return

        # Generate all possible states from current state
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited:
                queue.append((nr, nc, steps + 1, path + [(r, c)]))
                visited.add((nr, nc))

    # If no solution is found
    print("No solution found.")

if __name__ == "__main__":
    print("Solving vacuum cleaner problem:")
    vacuum_cleaner_problem(grid)


output: 
Solving vacuum cleaner problem:
Step 0: Current Grid State after cleaning cell (0, 0):
[0, 1, 0, 0]
[0, 1, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 1: Current Grid State after cleaning cell (1, 0):
[0, 1, 0, 0]
[0, 1, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 1: Current Grid State after cleaning cell (0, 1):
[0, 0, 0, 0]
[0, 1, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 2: Current Grid State after cleaning cell (2, 0):
[0, 0, 0, 0]
[0, 1, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 2: Current Grid State after cleaning cell (1, 1):
[0, 0, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 2: Current Grid State after cleaning cell (0, 2):
[0, 0, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 3: Current Grid State after cleaning cell (3, 0):
[0, 0, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 3: Current Grid State after cleaning cell (2, 1):
[0, 0, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 3: Current Grid State after cleaning cell (1, 2):
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 3: Current Grid State after cleaning cell (0, 3):
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

Step 4: Current Grid State after cleaning cell (3, 1):
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 1]
[0, 0, 0, 0]

Step 4: Current Grid State after cleaning cell (2, 2):
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 1]
[0, 0, 0, 0]

Step 4: Current Grid State after cleaning cell (1, 3):
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 1]
[0, 0, 0, 0]

Step 5: Current Grid State after cleaning cell (3, 2):
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 1]
[0, 0, 0, 0]

Step 5: Current Grid State after cleaning cell (2, 3):
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 0]
[0, 0, 0, 0]

All cells cleaned in 5 steps
