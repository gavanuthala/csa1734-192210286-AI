import itertools

def calculate_distance(city1, city2):
    """Calculate the Euclidean distance between two cities."""
    return ((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2) ** 0.5

def total_distance(route, distance_matrix):
    """Calculate the total distance of the route based on the distance matrix."""
    distance = 0
    for i in range(len(route) - 1):
        distance += distance_matrix[route[i]][route[i+1]]
    distance += distance_matrix[route[-1]][route[0]]  # Return to the starting city
    return distance

def tsp_brute_force(cities):
    """Solve the Traveling Salesman Problem using brute force."""
    num_cities = len(cities)
    # Generate a distance matrix
    distance_matrix = [[calculate_distance(cities[i], cities[j]) for j in range(num_cities)] for i in range(num_cities)]

    # Generate all permutations of city indices (except the first city to avoid duplicate cycles)
    city_indices = list(range(1, num_cities))
    shortest_route = None
    min_distance = float('inf')

    for permutation in itertools.permutations(city_indices):
        route = [0] + list(permutation)
        distance = total_distance(route, distance_matrix)
        if distance < min_distance:
            min_distance = distance
            shortest_route = route

    return shortest_route, min_distance

# Example usage:
cities = [
    (0, 0),  # City 0
    (1, 2),  # City 1
    (3, 4),  # City 2
    (6, 1),  # City 3
]

route, distance = tsp_brute_force(cities)
print(f"Shortest route: {route}")
print(f"Total distance: {distance}")



output : 
Shortest route: [0, 1, 2, 3]
Total distance: 15
