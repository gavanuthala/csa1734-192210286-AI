import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Distance from start node
        self.h = 0  # Heuristic distance to goal node
        self.f = 0  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    """Calculate the Manhattan distance heuristic."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, goal, grid):
    """Perform the A* algorithm to find the shortest path from start to goal in the grid."""
    open_list = []
    closed_list = set()

    start_node = Node(start)
    goal_node = Node(goal)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)

        if current_node.position == goal_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        (x, y) = current_node.position
        neighbors = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]

        for next_position in neighbors:
            if 0 <= next_position[0] < len(grid) and 0 <= next_position[1] < len(grid[0]):
                if grid[next_position[0]][next_position[1]] == 1:
                    continue  # Ignore blocked cells

                neighbor = Node(next_position, current_node)
                if neighbor.position in closed_list:
                    continue

                neighbor.g = current_node.g + 1
                neighbor.h = heuristic(neighbor.position, goal_node.position)
                neighbor.f = neighbor.g + neighbor.h

                if add_to_open(open_list, neighbor):
                    heapq.heappush(open_list, neighbor)

    return None  # No path found

def add_to_open(open_list, neighbor):
    """Check if a neighbor should be added to the open list (avoid duplicates with higher costs)."""
    for node in open_list:
        if neighbor.position == node.position and neighbor.g >= node.g:
            return False
    return True

# Example usage:
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
]

start = (0, 0)
goal = (4, 4)
path = astar(start, goal, grid)
print(f"Path: {path}")




output: 
Path: [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)]
